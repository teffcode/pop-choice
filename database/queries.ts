import pool from ".";

/**
 * Saves a movie in the database with its title, description, and embedding.
 * 
 * @param {string} title - The title of the movie.
 * @param {string} description - A brief description of the movie.
 * @param {number[]} embedding - The embedding vector generated by OpenAI.
 * @returns {Promise<Object>} - Returns the inserted movie data from the database.
 * 
 * @throws {Error} - Throws an error if the database query fails.
 */
export const saveMovie = async (
  title: string,
  description: string,
  embedding: number[]
) => {
  if (!Array.isArray(embedding) || embedding.some(isNaN)) {
    throw new Error("Embedding must be an array of numbers.");
  }

  // Convert embedding to the correct format for PostgreSQL (pgvector)
  const formattedEmbedding = `[${embedding.join(",")}]`;

  const query = `
    INSERT INTO movies (title, description, embedding)
    VALUES ($1, $2, $3)
    RETURNING *;
  `;

  const { rows } = await pool.query(query, [title, description, formattedEmbedding]);
  return rows[0]; // Returns the inserted movie
};

/**
 * Retrieves the most relevant movie from the database based on the given embedding.
 * Uses cosine similarity to find the closest match.
 * 
 * @param {number[]} userEmbedding - The embedding vector representing the user's input.
 * @returns {Promise<Object | null>} - Returns the most relevant movie or null if no match is found.
 * 
 * @throws {Error} - Throws an error if the database query fails.
 */
export const getRecommendedMovie = async (userEmbedding: number[]) => {
  if (!Array.isArray(userEmbedding) || userEmbedding.some(isNaN)) {
    throw new Error("User embedding must be an array of numbers.");
  }

  // Convert embedding to the correct format for PostgreSQL (pgvector)
  const formattedEmbedding = `[${userEmbedding.join(",")}]`;

  const query = `
    SELECT title, description
    FROM movies
    ORDER BY embedding <-> $1
    LIMIT 1;
  `;

  const { rows } = await pool.query(query, [formattedEmbedding]);
  return rows[0] || null; // Returns the closest matching movie or null if none found
};
